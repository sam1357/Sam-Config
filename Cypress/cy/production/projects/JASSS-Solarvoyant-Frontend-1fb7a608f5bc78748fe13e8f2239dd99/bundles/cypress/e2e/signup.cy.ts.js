/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!**********************************!*\
  !*** ./cypress/e2e/signup.cy.ts ***!
  \**********************************/

describe("Signup Page", function () {
    var username = "validuser";
    var email = "".concat(Math.random().toString(36).substring(2, 15), "@test.com");
    var password = "strongpassword";
    beforeEach(function () {
        // delete the user after the test
        cy.request({
            method: "POST",
            url: "/api/auth/login",
            body: JSON.stringify({ email: email, password: password }),
            failOnStatusCode: false,
        }).then(function (res) {
            if (res.status === 200) {
                var userID = res.body.user.id;
                expect(userID).to.not.equal("");
                cy.request("DELETE", "/api/deleteUser", { userID: userID }).then(function (res) {
                    expect(res.status).to.equal(200);
                });
            }
        });
        cy.visit("/signup"); // Change '/signup' to the actual URL of your signup page
    });
    it("should display validation errors when submitting empty form", function () {
        cy.get("button[type=submit]").click();
        cy.get("input[name=username]").should("have.attr", "aria-invalid", "true");
        cy.get("input[name=email]").should("have.attr", "aria-invalid", "true");
        cy.get("input[name=password]").should("have.attr", "aria-invalid", "true");
        cy.get("input[name=confirmPassword]").should("have.attr", "aria-invalid", "true");
    });
    it("should display validation errors when submitting invalid data", function () {
        cy.get("input[name=username]").type("user!@#");
        cy.get("input[name=email]").type("invalidemail");
        cy.get("input[name=password]").type("short");
        cy.get("input[name=confirmPassword]").type("notmatching");
        cy.get("button[type=submit]").click();
        cy.contains("Username can only contain alphanumeric characters");
        cy.contains("Please provide a valid email.");
        cy.contains("Password must contain at least 6 characters.");
        cy.contains("Passwords must match.");
    });
    it("should succeed with full register, sign out, login flow", function () {
        cy.get("input[name=username]").type(username);
        cy.get("input[name=email]").type(email);
        cy.get("input[name=password]").type(password);
        cy.get("input[name=confirmPassword]").type(password);
        cy.get("button[type=submit]").click();
        // eslint-disable-next-line
        cy.wait(6000);
        cy.reload();
        cy.url().should("contain", "/setup");
    });
    it("signup page link works", function () {
        cy.get('a[href*="/login"]').click();
        cy.url().should("contain", "/login");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbnVwLmN5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2lnbnVwLmN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxRQUFRLENBQUMsYUFBYSxFQUFFO0lBQ3RCLElBQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQztJQUM3QixJQUFNLEtBQUssR0FBRyxVQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBVyxDQUFDO0lBQ3hFLElBQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDO0lBRWxDLFVBQVUsQ0FBQztRQUNULGlDQUFpQztRQUNqQyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ1QsTUFBTSxFQUFFLE1BQU07WUFDZCxHQUFHLEVBQUUsaUJBQWlCO1lBQ3RCLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxPQUFBLEVBQUUsUUFBUSxVQUFBLEVBQUUsQ0FBQztZQUN6QyxnQkFBZ0IsRUFBRSxLQUFLO1NBQ3hCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFHO1lBQ1YsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO2dCQUN2QixJQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDaEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRztvQkFDM0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dC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QUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImRlc2NyaWJlKFwiU2lnbnVwIFBhZ2VcIiwgKCkgPT4ge1xuICBjb25zdCB1c2VybmFtZSA9IFwidmFsaWR1c2VyXCI7XG4gIGNvbnN0IGVtYWlsID0gYCR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDE1KX1AdGVzdC5jb21gO1xuICBjb25zdCBwYXNzd29yZCA9IFwic3Ryb25ncGFzc3dvcmRcIjtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAvLyBkZWxldGUgdGhlIHVzZXIgYWZ0ZXIgdGhlIHRlc3RcbiAgICBjeS5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICB1cmw6IFwiL2FwaS9hdXRoL2xvZ2luXCIsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGVtYWlsLCBwYXNzd29yZCB9KSxcbiAgICAgIGZhaWxPblN0YXR1c0NvZGU6IGZhbHNlLFxuICAgIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICBjb25zdCB1c2VySUQgPSByZXMuYm9keS51c2VyLmlkO1xuICAgICAgICBleHBlY3QodXNlcklEKS50by5ub3QuZXF1YWwoXCJcIik7XG4gICAgICAgIGN5LnJlcXVlc3QoXCJERUxFVEVcIiwgYC9hcGkvZGVsZXRlVXNlcmAsIHsgdXNlcklEIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjeS52aXNpdChcIi9zaWdudXBcIik7IC8vIENoYW5nZSAnL3NpZ251cCcgdG8gdGhlIGFjdHVhbCBVUkwgb2YgeW91ciBzaWdudXAgcGFnZVxuICB9KTtcblxuICBpdChcInNob3VsZCBkaXNwbGF5IHZhbGlkYXRpb24gZXJyb3JzIHdoZW4gc3VibWl0dGluZyBlbXB0eSBmb3JtXCIsICgpID0+IHtcbiAgICBjeS5nZXQoXCJidXR0b25bdHlwZT1zdWJtaXRdXCIpLmNsaWNrKCk7XG5cbiAgICBjeS5nZXQoXCJpbnB1dFtuYW1lPXVzZXJuYW1lXVwiKS5zaG91bGQoXCJoYXZlLmF0dHJcIiwgXCJhcmlhLWludmFsaWRcIiwgXCJ0cnVlXCIpO1xuICAgIGN5LmdldChcImlucHV0W25hbWU9ZW1haWxdXCIpLnNob3VsZChcImhhdmUuYXR0clwiLCBcImFyaWEtaW52YWxpZFwiLCBcInRydWVcIik7XG4gICAgY3kuZ2V0KFwiaW5wdXRbbmFtZT1wYXNzd29yZF1cIikuc2hvdWxkKFwiaGF2ZS5hdHRyXCIsIFwiYXJpYS1pbnZhbGlkXCIsIFwidHJ1ZVwiKTtcbiAgICBjeS5nZXQoXCJpbnB1dFtuYW1lPWNvbmZpcm1QYXNzd29yZF1cIikuc2hvdWxkKFwiaGF2ZS5hdHRyXCIsIFwiYXJpYS1pbnZhbGlkXCIsIFwidHJ1ZVwiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgZGlzcGxheSB2YWxpZGF0aW9uIGVycm9ycyB3aGVuIHN1Ym1pdHRpbmcgaW52YWxpZCBkYXRhXCIsICgpID0+IHtcbiAgICBjeS5nZXQoXCJpbnB1dFtuYW1lPXVzZXJuYW1lXVwiKS50eXBlKFwidXNlciFAI1wiKTtcbiAgICBjeS5nZXQoXCJpbnB1dFtuYW1lPWVtYWlsXVwiKS50eXBlKFwiaW52YWxpZGVtYWlsXCIpO1xuICAgIGN5LmdldChcImlucHV0W25hbWU9cGFzc3dvcmRdXCIpLnR5cGUoXCJzaG9ydFwiKTtcbiAgICBjeS5nZXQoXCJpbnB1dFtuYW1lPWNvbmZpcm1QYXNzd29yZF1cIikudHlwZShcIm5vdG1hdGNoaW5nXCIpO1xuXG4gICAgY3kuZ2V0KFwiYnV0dG9uW3R5cGU9c3VibWl0XVwiKS5jbGljaygpO1xuXG4gICAgY3kuY29udGFpbnMoXCJVc2VybmFtZSBjYW4gb25seSBjb250YWluIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzXCIpO1xuICAgIGN5LmNvbnRhaW5zKFwiUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBlbWFpbC5cIik7XG4gICAgY3kuY29udGFpbnMoXCJQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgNiBjaGFyYWN0ZXJzLlwiKTtcbiAgICBjeS5jb250YWlucyhcIlBhc3N3b3JkcyBtdXN0IG1hdGNoLlwiKTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgc3VjY2VlZCB3aXRoIGZ1bGwgcmVnaXN0ZXIsIHNpZ24gb3V0LCBsb2dpbiBmbG93XCIsICgpID0+IHtcbiAgICBjeS5nZXQoXCJpbnB1dFtuYW1lPXVzZXJuYW1lXVwiKS50eXBlKHVzZXJuYW1lKTtcbiAgICBjeS5nZXQoXCJpbnB1dFtuYW1lPWVtYWlsXVwiKS50eXBlKGVtYWlsKTtcbiAgICBjeS5nZXQoXCJpbnB1dFtuYW1lPXBhc3N3b3JkXVwiKS50eXBlKHBhc3N3b3JkKTtcbiAgICBjeS5nZXQoXCJpbnB1dFtuYW1lPWNvbmZpcm1QYXNzd29yZF1cIikudHlwZShwYXNzd29yZCk7XG5cbiAgICBjeS5nZXQoXCJidXR0b25bdHlwZT1zdWJtaXRdXCIpLmNsaWNrKCk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBjeS53YWl0KDYwMDApO1xuICAgIGN5LnJlbG9hZCgpO1xuICAgIGN5LnVybCgpLnNob3VsZChcImNvbnRhaW5cIiwgXCIvc2V0dXBcIik7XG4gIH0pO1xuXG4gIGl0KFwic2lnbnVwIHBhZ2UgbGluayB3b3Jrc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgY3kuZ2V0KCdhW2hyZWYqPVwiL2xvZ2luXCJdJykuY2xpY2soKTtcbiAgICBjeS51cmwoKS5zaG91bGQoXCJjb250YWluXCIsIFwiL2xvZ2luXCIpO1xuICB9KTtcbn0pO1xuIl19
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,